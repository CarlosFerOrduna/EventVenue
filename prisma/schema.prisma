generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Venue {
  idVenue           String              @id @default(uuid()) @db.VarChar(36)
  name              String              @unique @db.VarChar(100)
  description       String?             @db.VarChar(255)
  capacity          Int?                @db.UnsignedSmallInt()
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  EventTypeVenue    EventTypeVenue[]
  Reservation       Reservation[]
  VenueAvailability VenueAvailability[]
}

model Availability {
  idAvailability    String              @id @default(uuid()) @db.VarChar(36)
  description       String?             @db.VarChar(15)
  dateOfWeek        Int                 @db.UnsignedTinyInt()
  startTime         DateTime            @db.Time()
  endTime           DateTime            @db.Time()
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  VenueAvailability VenueAvailability[]
}

model VenueAvailability {
  idVenueAvailability String       @id @default(uuid()) @db.VarChar(36)
  idVenue             String       @db.VarChar(36)
  idAvailability      String       @db.VarChar(36)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  deletedAt           DateTime?
  venue               Venue        @relation(fields: [idVenue], references: [idVenue])
  availability        Availability @relation(fields: [idAvailability], references: [idAvailability])
}

model EventType {
  idEventType           String                  @id @default(uuid())
  name                  String                  @unique @db.VarChar(100)
  description           String?                 @db.VarChar(255)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  EventTypeVenue        EventTypeVenue[]
  EventTypeEventFeature EventTypeEventFeature[]
  Reservation           Reservation[]
}

model EventTypeVenue {
  idEventTypeOnVenue String    @id @default(uuid())
  idVenue            String    @db.VarChar(36)
  idEventType        String    @db.VarChar(36)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  venue              Venue     @relation(fields: [idVenue], references: [idVenue])
  eventType          EventType @relation(fields: [idEventType], references: [idEventType])
}

model EventFeature {
  idEventFeature          String                    @id @default(uuid()) @db.VarChar(36)
  name                    String                    @unique @db.VarChar(100)
  description             String?                   @db.VarChar(255)
  price                   Decimal                   @db.Decimal(18, 2)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deletedAt               DateTime?
  EventTypeEventFeature   EventTypeEventFeature[]
  ReservationEventFeature ReservationEventFeature[]
}

model EventTypeEventFeature {
  idEventTypeEventFeature String       @id @default(uuid())
  idEventType             String       @db.VarChar(36)
  idEventFeature          String       @db.VarChar(36)
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  deletedAt               DateTime?
  eventType               EventType    @relation(fields: [idEventType], references: [idEventType])
  eventFeature            EventFeature @relation(fields: [idEventFeature], references: [idEventFeature])
}

model User {
  idUser      String        @id @default(uuid())
  email       String        @unique @db.VarChar(60)
  names       String?       @db.VarChar(100)
  surnames    String?       @db.VarChar(100)
  role        Role          @default(USER)
  password    String        @db.VarChar(20)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  UserAddress UserAddress[]
}

enum Role {
  USER
  ADMIN
}

model Address {
  idAddress    String        @id @default(uuid())
  streetName   String?       @db.VarChar(100)
  streetNumber Int?          @db.UnsignedSmallInt
  zipCode      String?       @db.VarChar(15)
  neighborhood String?       @db.VarChar(150)
  floor        String?       @db.VarChar(15)
  apartment    String?       @db.VarChar(15)
  city         String?       @db.VarChar(100)
  state        String?       @db.VarChar(100)
  country      String?       @db.VarChar(100)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  UserAddress  UserAddress[]
}

model UserAddress {
  idUserAddress String    @id @default(uuid())
  idUser        String    @db.VarChar(36)
  idAddress     String    @db.VarChar(36)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  user          User      @relation(fields: [idUser], references: [idUser])
  address       Address   @relation(fields: [idAddress], references: [idAddress])
}

model Reservation {
  idReservation           String                    @id @default(uuid())
  idVenue                 String                    @db.VarChar(36)
  idEventType             String                    @db.VarChar(36)
  description             String?                   @db.VarChar(255)
  date                    DateTime                  @db.Date()
  start                   DateTime?                 @db.Time()
  end                     DateTime?                 @db.Time()
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deletedAt               DateTime?
  venue                   Venue                     @relation(fields: [idVenue], references: [idVenue])
  eventType               EventType                 @relation(fields: [idEventType], references: [idEventType])
  ReservationEventFeature ReservationEventFeature[]
}

model ReservationEventFeature {
  idReservationEventFeature String       @id @default(uuid()) @db.VarChar(36)
  idReservation             String       @db.VarChar(36)
  idEventFeature            String       @db.VarChar(36)
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  deletedAt                 DateTime?
  eventFeature              EventFeature @relation(fields: [idEventFeature], references: [idEventFeature])
  reservation               Reservation  @relation(fields: [idReservation], references: [idReservation])
}
